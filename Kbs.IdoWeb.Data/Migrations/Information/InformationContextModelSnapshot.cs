// <auto-generated />
using System;
using System.Collections;
using Kbs.IdoWeb.Data.Information;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Kbs.IdoWeb.Data.Migrations.Information
{
    [DbContext(typeof(InformationContext))]
    partial class InformationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.Region_RegionId_seq", "'Region_RegionId_seq', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.Taxon_TaxonId_seq", "'Taxon_TaxonId_seq', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.TaxonToRegion_TaxonRegionId_seq", "'TaxonToRegion_TaxonRegionId_seq', '', '1', '1', '', '', 'Int32', 'False'");

            modelBuilder.Entity("Kbs.IdoWeb.Data.Information.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('\"Inf\".\"Region_RegionId_seq\"'::regclass)");

                    b.Property<string>("LocalisationJson")
                        .HasColumnType("jsonb");

                    b.Property<int?>("SubRegionOfId");

                    b.HasKey("RegionId");

                    b.HasIndex("SubRegionOfId");

                    b.ToTable("Region","Inf");
                });

            modelBuilder.Entity("Kbs.IdoWeb.Data.Information.RegionState", b =>
                {
                    b.Property<int>("RegionStateId");

                    b.Property<string>("LocalisationJson")
                        .HasColumnType("jsonb");

                    b.HasKey("RegionStateId");

                    b.ToTable("RegionState","Inf");
                });

            modelBuilder.Entity("Kbs.IdoWeb.Data.Information.Taxon", b =>
                {
                    b.Property<int>("TaxonId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('\"Inf\".\"Taxon_TaxonId_seq\"'::regclass)");

                    b.Property<int?>("ClassId");

                    b.Property<string>("DescriptionBy")
                        .HasMaxLength(100);

                    b.Property<int?>("DescriptionYear");

                    b.Property<string>("Diagnose");

                    b.Property<int?>("EdaphobaseId");

                    b.Property<int?>("FamilyId");

                    b.Property<int?>("GenusId");

                    b.Property<string>("Group");

                    b.Property<bool?>("HasBracketDescription")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("HasTaxDescChildren")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("false");

                    b.Property<int?>("IdentificationLevelFemale");

                    b.Property<int?>("IdentificationLevelMale");

                    b.Property<int?>("KingdomId");

                    b.Property<string>("LocalisationJson")
                        .HasColumnType("jsonb");

                    b.Property<int?>("OrderId");

                    b.Property<int?>("PhylumId");

                    b.Property<int?>("SpeciesId");

                    b.Property<int?>("SubclassId");

                    b.Property<int?>("SubfamilyId");

                    b.Property<int?>("SuborderId");

                    b.Property<int?>("SubphylumId");

                    b.Property<string>("Synonyms")
                        .HasColumnType("jsonb");

                    b.Property<string>("TaxonBiotopeAndLifestyle");

                    b.Property<string>("TaxonDescription");

                    b.Property<string>("TaxonDistribution");

                    b.Property<string>("TaxonName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("TaxonomyStateId");

                    b.HasKey("TaxonId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("GenusId");

                    b.HasIndex("KingdomId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PhylumId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("SubclassId");

                    b.HasIndex("SubfamilyId");

                    b.HasIndex("SuborderId");

                    b.HasIndex("SubphylumId");

                    b.HasIndex("TaxonomyStateId");

                    b.ToTable("Taxon","Inf");
                });

            modelBuilder.Entity("Kbs.IdoWeb.Data.Information.TaxonToRegion", b =>
                {
                    b.Property<int>("TaxonRegionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('\"Inf\".\"TaxonToRegion_TaxonRegionId_seq\"'::regclass)");

                    b.Property<int>("RegionId");

                    b.Property<int?>("RegionStateId");

                    b.Property<int>("TaxonId");

                    b.HasKey("TaxonRegionId")
                        .HasName("TaxonToRegion_pkey");

                    b.HasIndex("RegionId");

                    b.HasIndex("TaxonId");

                    b.ToTable("TaxonToRegion","Inf");
                });

            modelBuilder.Entity("Kbs.IdoWeb.Data.Information.TaxonomyState", b =>
                {
                    b.Property<int>("StateId");

                    b.Property<int?>("HierarchyLevel");

                    b.Property<BitArray>("IsMainGroup")
                        .IsRequired()
                        .HasColumnType("bit(1)");

                    b.Property<BitArray>("IsTreeNode")
                        .IsRequired()
                        .HasColumnType("bit(1)");

                    b.Property<string>("StateDescription")
                        .HasMaxLength(100);

                    b.Property<int>("StateLevel");

                    b.Property<string>("StateListName")
                        .HasMaxLength(100);

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("StateId")
                        .HasName("TaxonomyState_pkey");

                    b.ToTable("TaxonomyState","Inf");
                });

            modelBuilder.Entity("Kbs.IdoWeb.Data.Information.Region", b =>
                {
                    b.HasOne("Kbs.IdoWeb.Data.Information.Region", "SubRegionOf")
                        .WithMany("InverseSubRegionOf")
                        .HasForeignKey("SubRegionOfId")
                        .HasConstraintName("Region_SubRegionOfId_fkey");
                });

            modelBuilder.Entity("Kbs.IdoWeb.Data.Information.Taxon", b =>
                {
                    b.HasOne("Kbs.IdoWeb.Data.Information.Taxon", "Class")
                        .WithMany("InverseClass")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("Taxon_ClassId_fkey");

                    b.HasOne("Kbs.IdoWeb.Data.Information.Taxon", "Family")
                        .WithMany("InverseFamily")
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("Taxon_FamilyId_fkey");

                    b.HasOne("Kbs.IdoWeb.Data.Information.Taxon", "Genus")
                        .WithMany("InverseGenus")
                        .HasForeignKey("GenusId")
                        .HasConstraintName("Taxon_GenusId_fkey");

                    b.HasOne("Kbs.IdoWeb.Data.Information.Taxon", "Kingdom")
                        .WithMany("InverseKingdom")
                        .HasForeignKey("KingdomId")
                        .HasConstraintName("Taxon_KingdomId_fkey");

                    b.HasOne("Kbs.IdoWeb.Data.Information.Taxon", "Order")
                        .WithMany("InverseOrder")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("Taxon_OrderId_fkey");

                    b.HasOne("Kbs.IdoWeb.Data.Information.Taxon", "Phylum")
                        .WithMany("InversePhylum")
                        .HasForeignKey("PhylumId")
                        .HasConstraintName("Taxon_PhylumId_fkey");

                    b.HasOne("Kbs.IdoWeb.Data.Information.Taxon", "Species")
                        .WithMany("InverseSpecies")
                        .HasForeignKey("SpeciesId")
                        .HasConstraintName("Taxon_SpeciesId_fkey");

                    b.HasOne("Kbs.IdoWeb.Data.Information.Taxon", "Subclass")
                        .WithMany("InverseSubclass")
                        .HasForeignKey("SubclassId")
                        .HasConstraintName("Taxon_SubclassId_fkey");

                    b.HasOne("Kbs.IdoWeb.Data.Information.Taxon", "Subfamily")
                        .WithMany("InverseSubfamily")
                        .HasForeignKey("SubfamilyId")
                        .HasConstraintName("Taxon_SubfamilyId_fkey");

                    b.HasOne("Kbs.IdoWeb.Data.Information.Taxon", "Suborder")
                        .WithMany("InverseSuborder")
                        .HasForeignKey("SuborderId")
                        .HasConstraintName("Taxon_SuborderId_fkey");

                    b.HasOne("Kbs.IdoWeb.Data.Information.Taxon", "Subphylum")
                        .WithMany("InverseSubphylum")
                        .HasForeignKey("SubphylumId")
                        .HasConstraintName("Taxon_SubphylumId_fkey");

                    b.HasOne("Kbs.IdoWeb.Data.Information.TaxonomyState", "TaxonomyState")
                        .WithMany("Taxon")
                        .HasForeignKey("TaxonomyStateId")
                        .HasConstraintName("Taxon_TaxonomyStateId_fkey");
                });

            modelBuilder.Entity("Kbs.IdoWeb.Data.Information.TaxonToRegion", b =>
                {
                    b.HasOne("Kbs.IdoWeb.Data.Information.Region", "Region")
                        .WithMany("TaxonToRegion")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("TaxonToRegion_RegionId_fkey");

                    b.HasOne("Kbs.IdoWeb.Data.Information.Taxon", "Taxon")
                        .WithMany("TaxonToRegion")
                        .HasForeignKey("TaxonId")
                        .HasConstraintName("TaxonToRegion_TaxonId_fkey");
                });
#pragma warning restore 612, 618
        }
    }
}
